#!/usr/bin/perl 
use warnings;
use strict;

$ENV{'PROPHET_REPO'} = $ENV{'SD_REPO'} || $ENV{'HOME'}.'/.sd';

use Prophet::CLI;
use App::SD::Model::Ticket;
my $cli = Prophet::CLI->new( { app_class => 'App::SD' } );
$cli->run_one_command;


package App::SD::CLI::Command;
use base qw/Prophet::CLI::Command/;

package App::SD::CLI::Command::Ticket::Comment;
use base qw/App::SD::CLI::Command/;

use constant record_class => 'App::SD::Model::Comment';

package App::SD::CLI::Command::Ticket::Comment::Create;
use base qw/App::SD::CLI::Command::Ticket::Comment Prophet::CLI::Command::Create/;

# override args to feed in that ticket's uuid as an argument to the comment
sub args {
    my $self = shift;
    return { %{$self->SUPER::args}, ticket => $self->uuid};
}


package App::SD::CLI::Command::Help;
use base qw/App::SD::CLI::Command/;

sub run {

print <<EOF

$0 ticket create --summary "This is a summary" --status new --somekey value
$0 ticket update --uuid <uuid> --status resolved
$0 ticket search --regex .
$0 ticket delete --uuid <uuid>
$0 ticket show --uuid <uuid>
$0 pull remote-url

$0 help  
    Show this file

EOF

}


package App::SD::CLI::Command::Ticket::Show;
use base qw/App::SD::CLI::Command Prophet::CLI::Command::Show/;





package App::SD::CLI::Command::Details;
use base qw/App::SD::CLI::Command/;
sub run {
    my $self = shift;
    print "\n=head1 METADATA\n\n"; 
    $self->App::SD::CLI::Command::Ticket::Show::run();
    print "\n=head1 COMMENTS\n\n";
    $self->App::SD::CLI::Command::Ticket::Comments::run();
}

package App::SD::CLI::Command::Ticket;
use base qw/App::SD::CLI::Command/;

use constant record_class => 'App::SD::Model::Ticket';

package App::SD::CLI::Command::Ticket::Comments;
use base qw/App::SD::CLI::Command::Ticket/;

sub run {
    my $self = shift;
    my $record = $self->_get_record();
    $record->load( uuid => $self->cli->uuid );
    unless (@{$record->comments}) {
        print "No comments found\n";
    }

    for (@{$record->comments}) {
        print "comment id: ".$_->uuid."\n";
        print "Content:\n".$_->prop('content')."\n";
    }

}

package App::SD::CLI::Command::Merge;
use base qw/App::SD::CLI::Command Prophet::CLI::Command::Merge/;

package App::SD::CLI::Command::Push;
use base qw/App::SD::CLI::Command::Merge/;

sub run {
    my $self = shift; 
    local $ENV{PROPHET_RESOLVER} = 'Prompt';
    bless $self, 'App::SD::CLI::Command::Merge';
    $self->args( {to => $self->args->{'to'}, from => $self->app_handle->default_replica_type.":file://".$self->app_handle->handle->fs_root });
    $self->run; 
}

package App::SD::CLI::Command::Pull;
use base qw/App::SD::CLI::Command::Merge/;

sub run {
    my $self = shift; 
    local $ENV{PROPHET_RESOLVER} = 'Prompt';
    bless $self, 'App::SD::CLI::Command::Merge';
    $self->args({  from => $self->args->{'from'}, 
                   to => $self->cli->app_handle->default_replica_type.":file://".$cli->app_handle->handle->fs_root });
    $self->run; 
}

